# -*- coding: utf-8 -*-
"""Proverka_Polusem

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zC-mf4HfTWXsrSzeVKQKqc-IMqZ7OdRt
"""

import math
import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import Rbf
plt.style.use('_mpl-gallery')

class Atom:
    def __init__(self,name, atomic_number, atomic_mass):
        '''
        Инициализация основных значений для последующего вычисления
        :param name:  Type is string. Условное обозначение эл-та
        :param atomic_number: Type is int. Номер атома (зарядовое число).
        :param atomic_mass: Type is int. Массовое число атома.
        '''
        self.name = name
        self.atomic_number = atomic_number
        self.atomic_mass = atomic_mass
        self.G = None


    def binding_energy(self):
        '''
        Расчет удельной энергии связи
        :return: возвращает значение удельной энергии связи атома G
        '''
        a1 = 15.7
        a2 = 17.8
        a3 = 0.71
        a4 = 23.7
        a5 = 34.0
        neutro = self.atomic_mass - self.atomic_number
        if (self.atomic_number % 2 == 0 and neutro % 2 == 0):
          self.G = (a1*self.atomic_mass - a2*self.atomic_mass**(2/3) - a3*(self.atomic_number**2)/(self.atomic_mass**(1/3)) - a4*(self.atomic_mass - 2*self.atomic_number)**2/self.atomic_mass + a5*self.atomic_mass**(-3/4))/self.atomic_mass
        elif (self.atomic_mass % 2 != 0):
          self.G = (a1*self.atomic_mass - a2*self.atomic_mass**(2/3) - a3*(self.atomic_number**2)/(self.atomic_mass**(1/3)) - a4*(self.atomic_mass - 2*self.atomic_number)**2/self.atomic_mass)/self.atomic_mass
        elif (self.atomic_number % 2 != 0 and neutro % 2 != 0):
          self.G = (a1*self.atomic_mass - a2*self.atomic_mass**(2/3) - a3*(self.atomic_number**2)/(self.atomic_mass**(1/3)) - a4*(self.atomic_mass - 2*self.atomic_number)**2/self.atomic_mass - a5*self.atomic_mass**(-3/4))/self.atomic_mass
        return self.G


    def atom_mass(self):
        '''
        Расчет массы атома
        :return: возвращает массу атома mass
        '''
        mass = self.atomic_mass * 1.660539040e-27
        print(f"Масса атома {self.name}: {mass} кг")
        return mass


    def atom_radius(self):
        '''
        Расчет радиуса атома
        :return: возвращает радиус атома R
        '''
        r0 = 1.2
        R = r0 * self.atomic_mass**(1/3)
        return R


    def stability_beta_decay(self):
        '''
        Проверка на устойчивость к бета-распаду
        :return: ничего не возращается
        '''
        neutro = self.atomic_mass - self.atomic_number
        if (neutro > self.atomic_number):
          print(f"Атом {self.name} склонен к бета минус распаду")
        elif (neutro < self.atomic_number):
          print(f"Атом {self.name} склонен к бета плюс распаду")
        elif (neutro == self.atomic_number):
          print(f"Атом {self.name} стабилен")


    def fragments(self):
        '''
        Проверка на возможность деления на осколки
        :return: ничего не возращается
        '''
        param = self.atomic_number**(2)/self.atomic_mass
        if (param > 17):
          print(f"Атом {self.name} может разделиться на 2 одинаковых четно-четных осколка")
        else:
          print(f"Атом {self.name} не может разделиться на 2 одинаковых четно-четных осколка")


    def ret_number(self):
        '''
        Возврат номера заданного атома
        :return: возвращает номер атома
        '''
        return self.atomic_number



U = Atom('U-238',92,238)
Pu239 = Atom('Pu-239',94,239)
Cf = Atom('Cf-252',98,252)
Pu238 = Atom('Pu-238',94,238)
Te = Atom('Te-135',52,135)
Ni = Atom('Ni-60',28,60)
O = Atom('O-16',8,16)
N = Atom('N-15',7,15)
P = Atom('P-29',15,29)
Si = Atom('Si-29',14,29)
Cr = Atom('Cr-52',24,52)

atoms = [Cf,Pu239,Pu238,U,Te,Ni,Cr,P,Si,O,N]

'''
Построение графиков для заданного набора атомов
'''
radii = list()
for i in range(0,11):
    radii.append(atoms[i].atom_radius())

plt.figure(figsize=[9, 6])
plt.plot([7,8,14,15,24,28,52,92,94,94,98], radii, linewidth=2)
plt.grid(True, color='#DDDDDD', linestyle='--', which='both')
plt.xlabel('Z')
plt.ylabel('Radius, Ангстрем')
plt.title('Зависимость радиуса атома от Z')
plt.xlim([0, 100])
plt.show()


G_specific = list()
for i in range(0,11):
    G_specific.append(atoms[i].binding_energy())

x=np.array([15,16,29,29.001,52,60,135,238,238.001,239,252])
plt.figure(figsize=[9, 6])
x_new = np.linspace(x.min(), x.max(), 500)
rbf = Rbf(x, G_specific, function = 'thin_plate', smooth = 0.001)
y_smooth = rbf(x_new)
plt.plot(x_new, y_smooth, linewidth=2)
plt.scatter (x, G_specific)

plt.grid(True, color='#DDDDDD', linestyle='--', which='both')
plt.xlabel('A')
plt.ylabel('G_specific, МэВ')
plt.title('Зависимость удельной энергии связи атома от А')
plt.xlim([0, 255])
plt.show()

'''
Расчет параметров атомов из заданного списка
'''
for i in range(0,11):
  mass = atoms[i].atom_mass()
  stability = atoms[i].stability_beta_decay()
  frags = atoms[i].fragments()
  print(f"Радиус атома {atoms[i].atom_radius()} ангстрем")
  print(f"Удельная энергия связи атома {atoms[i].name}: {atoms[i].binding_energy()} МэВ")